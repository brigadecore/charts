## Name of the project, in the form "user/project"
project: "brigadecore/empty-testbed"

## Domain/Org/Project
repository: "github.com/brigadecore/empty-testbed"

## The definitive clone URL. This can be any Git-supported URL format.
## You may set this to "" for no clone URL.
cloneURL: "https://github.com/brigadecore/empty-testbed.git"

## OPTIONAL: initGitSubmodules will recursively initialize all submodules in the repository. Default: false
# initGitSubmodules: "false"

## OPTIONAL: defaultScript is the brigade.js used by default when your VCS repo misses a brigade.js
## in it.
# defaultScript: |
#   const { events, Job } = require("brigadier")
#   function run(e, project) {
#     console.log("hello default script")
#   }
#   events.on("run", run)

## OPTIONAL: defaultScriptName is the name of a configmap used as a fallback brigade.js.
# defaultScriptName: default-script-cm

## OPTIONAL: defaultConfig is the brigade.json config used by default when your VCS repo has none
# defaultConfig: |
#   {
#     "dependencies": {
#         "@brigadecore/brigade-utils": "0.3.0"
#     }
#   }

## OPTIONAL: defaultConfigName is the name of a configmap used as a fallback brigade.js.
# defaultConfigName: default-config-cm


## Used by GitHub and other services to compute hook HMACs.
sharedSecret: "IBrakeForSeaBeasts"

## OPTIONAL: genericGatewaySecret is the secret that should be used on subsequent calls to the Generic Gateway in order to raise a "webhook" event for this Project
## This is REQUIRED for the Generic Gateway, but optional otherwise.
genericGatewaySecret: "mygenericsecret"

## OPTIONAL: Use this to have Brigade update your project about the build.
## This is REQUIRED for the GitHub gateway, but optional otherwise.
github:
  # token: "github oauth token"
  ## ENTERPRISE: For enterprise GitHub customers, set both of these as well.
  # baseURL: "https://internal.github.url/foo"
  # uploadURL: "https://internal.github.url/foo"

## OPTIONAL: Use this for private repositories
## This is the PRIVATE key that Brigade will use to clone a private repo.
## You should generate a special key for this. Don't reuse another one.
# ssh:
#   key: |-
#     -----BEGIN RSA PRIVATE KEY-----
#     IIEpAIBAAKCAg1wyZD164xNLrANjRrcsbieLwHJ6fKD3LC19E...
#     ...
#     ...
#     -----END RSA PRIVATE KEY-----
#   cert:

## OPTIONAL: Items in the 'secrets' array can be mounted as environment variables by
## the brigade.js
##
## Example:
##
## In JS, do this:
##
##   events.push = function(e, p) {
##     j = new Job("example")
##     j.env= {"MY_ENV_VAR": p.secrets.myVar}
##   }
##
## And here, add this:
##
##   secrets:
##     myVar: "super awesome"
##
## Inside of the job's pod, $MY_ENV_VAR = "super awesome"
secrets:
  ## Example:
  # username: hello

## OPTIONAL: vcsSidecar is the image that fetches a repo from a VCS
## The default sidecar uses Git to fetch a copy of the project.
##
## If this is not supplied, `brigadecore/git-sidecar:VERSION` will be used, where VERSION
## is the version of this chart.
##
## If this is set to NONE, no sidecar is used.  This may improve performance
## very slightly, but will break some gateways or cause the default script to
## be used.
# vcsSidecar: "brigadecore/git-sidecar:latest"

## OPTIONAL: vcsSidecarResources defines the resources (limits/requests) for all
## the init-containers to be created by the worker and the one for the worker itself
# vcsSidecarResources:
#   limits:
#     cpu: "100m"
#     memory: "100Mi"
#   requests:
#     cpu: "100m"
#     memory: "100Mi"

## OPTIONAL: imagePullSecrets allows you to specify a comma-separated list of
## image pull secrets that will be injected into the worker. With this, you can
## use a vcsSidecar or worker image from an internal repository.
## https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
# imagePullSecrets: foo

## OPTIONAL: buildStorageSize is the size of the shared storage space used by the jobs
# buildStorageSize: "50Mi"

## Allow Jobs to run in privileged mode. This will allow features like
## Docker-in-Docker. This must be set to true before turning allowHostMounts
## on.
allowPrivilegedJobs: "true"

## OPTIONAL: Use this to allow host mounted docker sockets in your jobs.
## This is a big security risk if your project is public-facing; enable at your own risk.
# allowHostMounts: "true"

## Kubernetes-specific configuration options.
kubernetes:
  ## OPTIONAL: Override the storage class used for storing job caches. This must
  ## point to a readWriteMany volume provisioner.
  # cacheStorageClass: default
  # # OPTIONAL: Override the storage class used for build storage. This must
  # # point to a readWriteMany volume provisioner.
  # buildStorageClass: default

###
## ADVANCED
###

## OPTIONAL: specify an alternative command that the worker pod should run on startup.
## For example, if you want the typescript compiler to re-run, replace this with
## 'yarn build-start'. The default is 'yarn -s start' (-s is for silent).
## Uncomment the line below to increase logging verbosity.
# workerCommand: "yarn start"

## OPTIONAL: Project-specific worker settings which takes precedence over brigade-wide settings
## Useful when you want a specific brigade-worker image for running brigade.js of this project.
worker:
  # registry: brigadecore
  # name: brigade-worker
  # tag:
  # pullPolicy: IfNotPresent
